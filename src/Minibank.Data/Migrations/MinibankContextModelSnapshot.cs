// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Minibank.Data.Contexts;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Minibank.Data.Migrations
{
    [DbContext(typeof(MinibankContext))]
    partial class MinibankContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Minibank.Data.Entities.BankAccounts.BankAccountDbModel", b =>
                {
                    b.Property<int>("BankAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("bank_account_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BankAccountId"));

                    b.Property<decimal>("Balance")
                        .HasColumnType("numeric")
                        .HasColumnName("balance");

                    b.Property<DateTime?>("ClosingTimestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("closing_timestamp");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("currency_code");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTime>("OpeningTimestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("opening_timestamp");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer")
                        .HasColumnName("owner_id");

                    b.HasKey("BankAccountId")
                        .HasName("pk_bank_accounts_id");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_bank_accounts_owner_id");

                    b.ToTable("bank_accounts", (string)null);
                });

            modelBuilder.Entity("Minibank.Data.Entities.Transactions.TransactionDbModel", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("transaction_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TransactionId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("currency_code");

                    b.Property<int>("FromAccountId")
                        .HasColumnType("integer")
                        .HasColumnName("from_account_id");

                    b.Property<int>("ToAccountId")
                        .HasColumnType("integer")
                        .HasColumnName("to_account_id");

                    b.HasKey("TransactionId")
                        .HasName("pk_transactions_id");

                    b.HasIndex("FromAccountId")
                        .HasDatabaseName("ix_transactions_from_account_id");

                    b.HasIndex("ToAccountId")
                        .HasDatabaseName("ix_transactions_to_account_id");

                    b.ToTable("transactions", (string)null);
                });

            modelBuilder.Entity("Minibank.Data.Entities.Users.UserDbModel", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("login");

                    b.HasKey("UserId")
                        .HasName("pk_user_id");

                    b.ToTable("bank_users", (string)null);
                });

            modelBuilder.Entity("Minibank.Data.Entities.BankAccounts.BankAccountDbModel", b =>
                {
                    b.HasOne("Minibank.Data.Entities.Users.UserDbModel", "Owner")
                        .WithMany("BankAccounts")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_bank_accounts_users_owner_id");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Minibank.Data.Entities.Transactions.TransactionDbModel", b =>
                {
                    b.HasOne("Minibank.Data.Entities.BankAccounts.BankAccountDbModel", "FromAccount")
                        .WithMany("OutcommingTransactions")
                        .HasForeignKey("FromAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_transactions_bank_accounts_bank_account_db_model_bank_accou");

                    b.HasOne("Minibank.Data.Entities.BankAccounts.BankAccountDbModel", "ToAccount")
                        .WithMany("IncommingTransactions")
                        .HasForeignKey("ToAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_transactions_bank_accounts_to_account_id");

                    b.Navigation("FromAccount");

                    b.Navigation("ToAccount");
                });

            modelBuilder.Entity("Minibank.Data.Entities.BankAccounts.BankAccountDbModel", b =>
                {
                    b.Navigation("IncommingTransactions");

                    b.Navigation("OutcommingTransactions");
                });

            modelBuilder.Entity("Minibank.Data.Entities.Users.UserDbModel", b =>
                {
                    b.Navigation("BankAccounts");
                });
#pragma warning restore 612, 618
        }
    }
}
